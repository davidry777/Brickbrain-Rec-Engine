services:
  postgres:
    image: postgres:15
    container_name: brickbrain-postgres
    environment:
      POSTGRES_USER: brickbrain
      POSTGRES_PASSWORD: brickbrain_password
      POSTGRES_DB: brickbrain
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brickbrain"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    image: continuumio/miniconda3:latest
    container_name: brickbrain-app
    working_dir: /app
    volumes:
      - .:/app
      - conda_envs:/opt/conda/envs
      - model_cache:/app/.cache
      - embeddings_data:/app/embeddings
      - ollama_models:/app/.cache/ollama/models
    ports:
      - "8000:8000"
      - "11434:11434"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_NAME=brickbrain
      - DB_USER=brickbrain
      - DB_PASSWORD=brickbrain_password
      - DB_PORT=5432
      - PYTHONPATH=${PYTHONPATH:-/app/src/scripts:/app}
      - SKIP_HEAVY_INITIALIZATION=false
      - TRANSFORMERS_CACHE=/app/.cache/huggingface
      - SENTENCE_TRANSFORMERS_HOME=/app/.cache/sentence-transformers
      - LANGCHAIN_CACHE_DIR=/app/.cache/langchain
      - TOKENIZERS_PARALLELISM=false
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_MODELS=/app/.cache/ollama/models
      - OPENBLAS_NUM_THREADS=1
      - OPENBLAS_VERBOSE=0
      - KMP_WARNINGS=0
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1
      - VECLIB_MAXIMUM_THREADS=1
      - NUMEXPR_NUM_THREADS=1
      - USE_OPENMP=0
    command: |
      bash -c "
        echo 'üì¶ Checking conda environment...' &&
        if ! conda env list | grep -q brickbrain-rec; then
          echo 'üì¶ Creating conda environment...'
          conda env create -f environment.yml -n brickbrain-rec
        else
          echo '‚úÖ Conda environment already exists'
        fi &&
        echo 'üîç Testing basic imports...' &&
        conda run -n brickbrain-rec python -c 'import fastapi; import uvicorn; print(\"‚úÖ FastAPI imports OK\")' &&
        echo 'üîç Testing database connection...' &&
        conda run -n brickbrain-rec python -c 'import psycopg2; import os; conn = psycopg2.connect(host=os.getenv(\"DB_HOST\", \"postgres\"), database=os.getenv(\"DB_NAME\", \"brickbrain\"), user=os.getenv(\"DB_USER\", \"brickbrain\"), password=os.getenv(\"DB_PASSWORD\", \"brickbrain_password\"), port=int(os.getenv(\"DB_PORT\", 5432))); conn.close(); print(\"‚úÖ Database connection OK\")' &&
        echo 'üöÄ Starting API server...' &&
        cd /app &&
        export PYTHONPATH=/app/src/scripts:/app:$PYTHONPATH &&
        echo 'üåê Server will be available at http://0.0.0.0:8000' &&
        echo 'üìñ API documentation: http://0.0.0.0:8000/docs' &&
        echo 'üîÑ Health check: http://0.0.0.0:8000/health' &&
        echo 'üìä Launching uvicorn...' &&
        exec conda run -n brickbrain-rec uvicorn src.scripts.recommendation_api:app --host 0.0.0.0 --port 8000 --log-level info
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "conda run -n brickbrain-rec python -c 'import requests; r=requests.get(\"http://localhost:8000/health\", timeout=5); exit(0 if r.status_code==200 else 1)' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

volumes:
  postgres_data:
  conda_envs:
  model_cache:
  embeddings_data:
  ollama_models: